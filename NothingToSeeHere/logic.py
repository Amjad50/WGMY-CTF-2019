# uncompyle6 version 3.6.0
# Python bytecode 3.7 (3394)
# Decompiled from: Python 3.8.0 (default, Oct 23 2019, 18:51:26) 
# [GCC 9.2.0]
# Embedded file name: gamelogic.py
# Size of source mod 2**32: 19669 bytes
import random, zlib, pickle, base64

class Logic:
    DEBUG = False

    def __init__(self, player_pos):
        if self.DEBUG:
            self.game_map = []
            gd = open('clean.txt', 'r').read().split('\n')
            for _ in range(4):
                self.game_map.append('                                                                                                                                                                     ')

            for gl in gd:
                self.game_map.append('     ' + gl + '     ')

            for _ in range(2):
                self.game_map.append('                                                                                                                                                                     ')

        else:
            self.game_map = ''
            self.game_map = base64.b64decode(self.game_map)
            self.game_map = zlib.decompress(self.game_map)
            self.game_map = pickle.loads(self.game_map)
        self.viewport = 'What you see =>\n╔═══════════╗\n║           ║ \n║           ║ \n║     ☻     ║ \n║           ║ \n║           ║ \n╚═══════════╝'
        self._Logic__gen_decode_key()
        self.player_move(player_pos)

    def __update_viewport(self, data):
        new_viewport = []
        if self.DEBUG:
            new_viewport.append('[DEBUG] What you see =>')
        else:
            new_viewport.append('What you see =>')
        if self.DEBUG:
            new_viewport.append('╔════╣DEBUG╠═════╗')
        else:
            new_viewport.append('╔════════════════╗')
        for dl in data:
            new_viewport.append('║' + dl + '║')

        if self.DEBUG:
            new_viewport.append('╚════╣DEBUG╠═════╝')
        else:
            new_viewport.append('╚════════════════╝')
        smile_edit = list(new_viewport[4])
        smile_edit[8] = '☻'
        new_viewport[4] = ''.join(smile_edit)
        self.viewport = '\n'.join(new_viewport)

    def __gen_decode_key(self):
        random.seed(949127234)
        self.d_keys = []
        for r in range(93):
            kr = []
            for k in range(155):
                kr.append(random.randint(33, 126))

            self.d_keys.append(kr)

    def __decode_view(self, data, key):
        if self.DEBUG:
            return data
        new_data = []
        for d, k in zip(data, key):
            l = []
            for i, sd in enumerate(d):
                l.append(chr(ord(sd) ^ k[i]))

            new_data.append(''.join(l))

        return new_data

    def player_move(self, player_pos):
        pos_x, pos_y = player_pos
        if pos_x > 15:
            pos_x = 15
        if pos_y > 10:
            pos_y = 10
        data = []
        key = []
        for i in range(5):
            vp = self.game_map[(pos_y + i)]
            vp = vp[pos_x:pos_x + 16]
            vk = self.d_keys[(pos_y + i)]
            vk = vk[pos_x:pos_x + 16]
            data.append(vp)
            key.append(vk)

        data = self._Logic__decode_view(data, key)
        self._Logic__update_viewport(data)
# okay decompiling uncompressed.pyc
